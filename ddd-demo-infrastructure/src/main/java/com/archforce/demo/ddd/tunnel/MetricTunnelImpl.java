package com.archforce.demo.ddd.tunnel;

import com.archforce.demo.ddd.common.event.DomainEventPublisher;
import com.archforce.demo.ddd.convertor.MetricConvertor;
import com.archforce.demo.ddd.domain.metrics.MainMetricType;
import com.archforce.demo.ddd.domain.metrics.MetricItem;
import com.archforce.demo.ddd.domain.metrics.SubMetric;
import com.archforce.demo.ddd.domain.metrics.SubMetricTypeEnum;
import com.archforce.demo.ddd.domain.metrics.appquality.AppMetric;
import com.archforce.demo.ddd.domain.metrics.appquality.AppMetricItem;
import com.archforce.demo.ddd.domain.metrics.devquality.BugMetric;
import com.archforce.demo.ddd.domain.metrics.devquality.BugMetricItem;
import com.archforce.demo.ddd.domain.metrics.techcontribution.CodeReviewMetric;
import com.archforce.demo.ddd.domain.metrics.techcontribution.CodeReviewMetricItem;
import com.archforce.demo.ddd.domain.metrics.techcontribution.MiscMetric;
import com.archforce.demo.ddd.domain.metrics.techcontribution.MiscMetricItem;
import com.archforce.demo.ddd.domain.metrics.techcontribution.RefactoringMetric;
import com.archforce.demo.ddd.domain.metrics.techcontribution.RefactoringMetricItem;
import com.archforce.demo.ddd.domain.metrics.techinfluence.ATAMetric;
import com.archforce.demo.ddd.domain.metrics.techinfluence.ATAMetricItem;
import com.archforce.demo.ddd.domain.metrics.techinfluence.PaperMetric;
import com.archforce.demo.ddd.domain.metrics.techinfluence.PaperMetricItem;
import com.archforce.demo.ddd.domain.metrics.techinfluence.PatentMetric;
import com.archforce.demo.ddd.domain.metrics.techinfluence.PatentMetricItem;
import com.archforce.demo.ddd.domain.metrics.techinfluence.SharingMetric;
import com.archforce.demo.ddd.domain.metrics.techinfluence.SharingMetricItem;
import com.archforce.demo.ddd.domain.tunnel.MetricTunnel;
import com.archforce.demo.ddd.dto.domainevent.MetricItemCreatedEvent;
import com.archforce.demo.ddd.tunnel.database.MetricMapper;
import com.archforce.demo.ddd.tunnel.database.dataobject.MetricDO;
import com.archforce.demo.ddd.tunnel.rpc.AppMetricMapper;
import com.archforce.demo.ddd.tunnel.rpc.BugMetricMapper;
import com.archforce.demo.ddd.tunnel.rpc.dataobject.AppMetricDO;
import com.archforce.demo.ddd.tunnel.rpc.dataobject.BugMetricDO;
import java.util.List;
import javax.annotation.Resource;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Component;

/**
 * 指标通道实现类
 *
 * @author Frank Zhang
 * @date 2020-07-02 12:20 PM
 */

@Slf4j
@Component
public class MetricTunnelImpl implements MetricTunnel {

    @Resource
    private MetricMapper metricMapper;

    @Resource
    private BugMetricMapper bugMetricMapper;

    @Resource
    private AppMetricMapper appMetricMapper;

    @Resource
    private DomainEventPublisher domainEventPublisher;

    @Override
    public void save(MetricItem metricItem) {
        MetricDO metricDO = MetricConvertor.toDataObject(metricItem);
        metricDO.setCreator("admin");
        metricDO.setModifier("admin");
        metricMapper.create(metricDO);

        log.debug("AutoGeneratedId: " + metricDO.getId());
        MetricItemCreatedEvent metricItemCreatedEvent = new MetricItemCreatedEvent();
        metricItemCreatedEvent.setId(metricDO.getId());
        metricItemCreatedEvent.setUserId(metricDO.getUserId());
        metricItemCreatedEvent.setMainMetricType(metricDO.getMainMetric());
        domainEventPublisher.publish(metricItemCreatedEvent);
    }


    @Override
    public List<SubMetric> listTechContributionMetric(String userId) {
        List<MetricDO> metricDOList = metricMapper.listByMainMetric(userId,
            MainMetricType.TECH_CONTRIBUTION.getCode());
        RefactoringMetric refactoringMetric = new RefactoringMetric();
        MiscMetric miscMetric = new MiscMetric();
        CodeReviewMetric codeReviewMetric = new CodeReviewMetric();
        List<SubMetric> subMetricList = Lists.newArrayList();
        subMetricList.add(refactoringMetric);
        subMetricList.add(miscMetric);
        subMetricList.add(codeReviewMetric);
        metricDOList.forEach(metricDO -> {
            String json = metricDO.getMetricItem();
            switch (SubMetricTypeEnum.valueOf(metricDO.getSubMetric())) {
                case REFACTORING:
                    refactoringMetric.addMetricItem(RefactoringMetricItem.valueOf(json));
                    break;
                case MISC:
                    miscMetric.addMetricItem(MiscMetricItem.valueOf(json));
                    break;
                case CODE_REVIEW:
                    codeReviewMetric.addMetricItem(CodeReviewMetricItem.valueOf(json));
                    break;
                default:
                    log.error("illegal SubMetric type: " + metricDO.getSubMetric());
            }
        });
        return subMetricList;
    }

    @Override
    public List<SubMetric> listTechInfluenceMetric(String userId) {
        List<MetricDO> metricDOList = metricMapper.listByMainMetric(userId,
            MainMetricType.TECH_INFLUENCE.getCode());
        ATAMetric ataMetric = new ATAMetric();
        SharingMetric sharingMetric = new SharingMetric();
        PatentMetric patentMetric = new PatentMetric();
        PaperMetric paperMetric = new PaperMetric();
        List<SubMetric> subMetricList = Lists.newArrayList();
        subMetricList.add(ataMetric);
        subMetricList.add(sharingMetric);
        subMetricList.add(patentMetric);
        subMetricList.add(paperMetric);
        metricDOList.forEach(metricDO -> {
            String json = metricDO.getMetricItem();
            switch (SubMetricTypeEnum.valueOf(metricDO.getSubMetric())) {
                case ATA:
                    ataMetric.addMetricItem(ATAMetricItem.valueOf(json));
                    break;
                case SHARING:
                    sharingMetric.addMetricItem(SharingMetricItem.valueOf(json));
                    break;
                case PATENT:
                    patentMetric.addMetricItem(PatentMetricItem.valueOf(json));
                    break;
                case PAPER:
                    paperMetric.addMetricItem(PaperMetricItem.valueOf(json));
                    break;
                default:
                    log.error("illegal SubMetric type: " + metricDO.getSubMetric());
            }
        });
        return subMetricList;
    }

    @Override
    public BugMetric getBugMetric(String userId) {
        BugMetricDO bugMetricDO = bugMetricMapper.getByUserId(userId);
        BugMetricItem bugMetricItem = new BugMetricItem(bugMetricDO.getBugCount(), bugMetricDO.getCheckInCodeCount());
        BugMetric bugMetric = new BugMetric();
        bugMetric.addMetricItem(bugMetricItem);
        return bugMetric;
    }

    @Override
    public AppMetric getAppMetric(String userId) {
        List<AppMetricDO> appMetricDOList = appMetricMapper.listByUserId(userId);
        AppMetric appMetric = new AppMetric();
        appMetricDOList.forEach(appMetricDO -> {
            AppMetricItem appMetricItem = new AppMetricItem();
            BeanUtils.copyProperties(appMetricDO, appMetricItem);
            appMetric.addMetricItem(appMetricItem);
        });
        return appMetric;
    }
}
